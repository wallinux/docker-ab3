#!/bin/bash
#set -x

[ "$HOSTIP" = "" ]   && HOSTIP=$(/sbin/ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' | grep "128\.")
HOSTNAME=$(hostname)

[ "$TARGETIP" = "" ]   && TARGETIP=128.224.95.181
[ "$TARGETUSER" = "" ] && TARGETUSER=root
[ "$TARGETPW" = "" ]   && TARGETPW=root
[ "$SESSIONLOOP" = "" ] && SESSIONLOOP=1

TARGETCMD="ssh ${TARGETUSER}@${TARGETIP}"

NO_OF_EVENTS=100
UEVENT=tptest
KEVENT=sched_switch

RELAYD_PID=lttng-relayd.pid
RELAYD_LOG=lttng-relayd.log
RELAYD_OUT=$HOME/lttng-test-live
#RELAYD_VERBOSE=-vvv

SESSIOND_LOG=lttng-sessiond.log
#SESSIOND_VERBOSE=-vvv
#CONSUMERD_VERBOSE=--verbose-consumer

########################################################################################

function dbg()
{
    [ "$verbose" -gt "0" ] && echo dbg: $@
}

function dbg2()
{
    [ "$verbose" -gt "1" ] && echo dbg2: $@
}

function dbg3()
{
    [ "$verbose" -gt "2" ] && echo dbg3: $@
}

function showversions()
{
    echo ------------------------------------------------------
    echo "HOST"
    echo "  host name:           " $HOSTNAME
    echo "  host ip:             " $HOSTIP
    echo "  babeltrace version:  " $(babeltrace -h | head -1)
    echo "  lttng-relayd version:" $(lttng-relayd --version)
    echo "TARGET"
    echo "  target name:         " $TARGETNAME
    echo "  target ip:           " $TARGETIP
    echo "  target user:         " $TARGETUSER
    echo "  lttng version:       " $($TARGETCMD lttng -V)
    echo "  arch:                " $TARGETARCH
    echo ------------------------------------------------------
}

function cleanup()
{
    local session=$1
    
    destroy_session $session-user
    destroy_session $session-kernel

    sleep 1
    rm -f $session-user.out
    rm -f $session-kernel.out
}

function stop_relayd()
{
    if [ -e $RELAYD_PID ]; then
	cat $RELAYD_PID | xargs kill
	rm $RELAYD_PID
    fi
}

function cleanup_relayd()
{
    stop_relayd
    rm -f $RELAYD_LOG
    rm -rf $RELAYD_OUT
}

function start_relayd()
{
    [ $restart_relayd = 1 ] && cleanup_relayd

    if [ ! -e $RELAYD_PID ]; then
	export LTTNG_NETWORK_SOCKET_TIMEOUT=$TIMEOUT
	lttng-relayd $RELAYD_VERBOSE -L net://localhost:5344 --output $RELAYD_OUT &> $RELAYD_LOG &
	echo $! > $RELAYD_PID
    fi
    dbg lttng-relayd pid: $(cat $RELAYD_PID)
}

function create_usersession()
{
    local session=$1
    
    $TARGETCMD lttng create $session -U net://$HOSTIP --live 1000000
    $TARGETCMD lttng enable-channel $session-channel -u -s $session
    $TARGETCMD lttng enable-event -a -u -c $session-channel -s $session
    [ $verbose != 0 ] && $TARGETCMD lttng list $session
    
    babeltrace -i lttng-live net://localhost/host/$TARGETNAME/$session > $session.out &
}

function create_kernelsession()
{
    local session=$1
    
    $TARGETCMD lttng create $session -U net://$HOSTIP --live 1000000
    $TARGETCMD lttng enable-channel $session-channel -u -s $session
    $TARGETCMD lttng enable-event -k -c $session-channel -s $session $KEVENT
    [ $verbose != 0 ] && $TARGETCMD lttng list $session
    
    babeltrace -i lttng-live net://localhost/host/$TARGETNAME/$session > $session.out &
}

function start_session()
{
    local session=$1
    
    $TARGETCMD lttng start $session
}


function stop_session()
{
    local session=$1
    
    $TARGETCMD lttng stop $session
}

function destroy_session()
{
    local session=$1
    
    $TARGETCMD lttng destroy $session 2> /dev/null
}

function check_usersession()
{
    local session=$1
    
    echo ""
    no_of_uevents=$(grep $UEVENT $session.out | wc -l)
    if [ "$no_of_uevents" = "$NO_OF_EVENTS" ]; then
	echo "TEST PASSED, $UEVENT"
    else
	echo "TEST FAILED, got $UEVENT $no_of_uevents and expected $NO_OF_EVENTS"
    fi
}

function check_kernelsession()
{
    local session=$1
    
    echo ""
    no_of_kevents=$(grep $KEVENT $session.out | wc -l)
    if [ "$no_of_kevents" != "0" ]; then
	echo "TEST PASSED, got $KEVENT $no_of_kevents"
    else
	echo "TEST FAILED, got $KEVENT $no_of_kevents but expected more events"
    fi
    [ $verbose != 0 ] && info_kernelsession $session
}

function info_kernelsession()
{
    local session=$1
    
    echo ""
    for i in $(seq 0 15); do
	no_of_events_percpu=$(grep $KEVENT $session.out | grep "cpu_id = $i" | wc -l)
	echo "CPU_ID$i: $KEVENT $no_of_events_percpu"
    done
}

function run_userapp()
{
    $TARGETCMD $TESTAPP $NO_OF_EVENTS
}

function targettest()
{
    local session=$1
    [ $user = 1 ]   && create_usersession   $session-user
    [ $kernel = 1 ] && create_kernelsession $session-kernel

    [ $user = 1 ]   && start_session        $session-user
    [ $kernel = 1 ] && start_session        $session-kernel

    [ $user = 1 ]   && run_userapp

    [ $user = 1 ]   && stop_session         $session-user
    [ $kernel = 1 ] && stop_session         $session-kernel

    sleep 10
    [ $user = 1 ]   && check_usersession    $session-user
    [ $kernel = 1 ] && check_kernelsession  $session-kernel

    sleep 1
    [ $user = 1 ]   && destroy_session      $session-user
    [ $kernel = 1 ] && destroy_session      $session-kernel
}

# Usage info
function show_help() {
cat << EOF
Usage: ${0##*/} [-hvkKuUr] COMMAND

OPTIONS
    -h          display this help and exit
    -v          verbose mode. Can be used multiple times for increased
                verbosity.
    -K          enable kernel event($KEVENT) and run kernelsession (default)
    -k          do NOT run kernelsession
    -U          run usersession (default)
    -u          do NOT run usersession
    -r          reuse existing lttng-relayd

COMMANDS
    prepare     Prepare target, setup up connection, create users, start lttng_sessiond
    run         Run test cases (default)
    showver     Show host and target lttng versions
    startrelayd Start lttng-relayd if it is not started

ENVIRONMENT VARIABLES
    TARGETIP          Set IP addr or name for the target, default=$TARGETIP
    TARGETUSER        Set user to use on target
    TARGETPW          Password to use for target user
    SESSIONLOOP       No of sessions to create
    TIMEOUT           Set LTTNG_NETWORK_SOCKET_TIMEOUT
    RELAYD_VERBOSE    [-v, -vv, -vvv]
    SESSIOND_VERBOSE  [-v, -vv, -vvv]
    CONSUMERD_VERBOSE [--verbose-consumer]
EOF
}

function getoptions()
{
    output_file=""
    verbose=0
    kernel=1
    user=1
    command=run
    restart_relayd=1

    OPTIND=1
    while getopts hkKuUvr opt; do
	case $opt in
            h)
		show_help
		exit 0
		;;
            v)  verbose=$((verbose+1))
		;;
            K)  kernel=1
		;;
            U)  user=1
		;;
            k)  kernel=0
		;;
            u)  user=0
		;;
            r)  restart_relayd=0
		;;
            *)
		show_help >&2
		exit 1
		;;
	esac
    done
    shift "$((OPTIND-1))" # Shift off the options and optional --.

    [ $# -gt 0 ] && command=$1

    dbg kernel=$kernel
    dbg user=$user
    dbg restart_relayd=$restart_relayd
    dbg command=$command

    dbg TARGETIP=$TARGETIP
    dbg TARGETUSER=$TARGETUSER
    dbg TARGETPW=$TARGETPW
    dbg SESSIONLOOP=$SESSIONLOOP
    dbg TIMEOUT=$TIMEOUT
    
    dbg2 RELAYD_VERBOSE=$RELAYD_VERBOSE
    dbg2 SESSIOND_VERBOSE=$SESSIOND_VERBOSE
    dbg2 CONSUMERD_VERBOSE=$CONSUMERD_VERBOSE
}

function run_config()
{
    TARGETNAME=$($TARGETCMD hostname)
    TARGETARCH=$($TARGETCMD uname -i)
    if [ "$TARGETARCH" = aarch64 ]; then
	LIB=lib64
    else
	LIB=lib
    fi
    TESTAPP=/usr/$LIB/lttng-tools/ptest/tests/utils/testapp/gen-ust-events/gen-ust-events
    SESSION=$TARGETNAME-$TARGETUSER-$HOSTNAME
}

function showver()
{
    dbg $FUNCNAME

    run_config
    showversions
}


function run()
{
    dbg $FUNCNAME

    run_config
    
    [ $verbose != 0 ] && showversions

    cleanup $SESSION

    start_relayd

    for i in $(seq 1 $SESSIONLOOP); do
	targettest $SESSION-$i
    done
}

function restart_lttng_sessiond()
{
    ssh root@${TARGETIP} "killall lttng-sessiond 2> /dev/null"
    sleep 5
    ssh root@${TARGETIP} "LTTNG_NETWORK_SOCKET_TIMEOUT=$TIMEOUT lttng-sessiond $SESSIOND_VERBOSE $CONSUMERD_VERBOSE &> $SESSIOND_LOG &"
}

function prepare_root()
{
    sshpass -p root ssh-copy-id root@${TARGETIP} 2>/dev/null
    ssh root@${TARGETIP} "groupadd tracing 2>/dev/null"
}

function prepare_user()
{
    prepare_root
    ssh root@${TARGETIP} "useradd -d /home/$TARGETUSER -m -s /bin/sh -g tracing $TARGETUSER 2> /dev/null"
    ssh root@${TARGETIP} "echo '$TARGETUSER:$TARGETPW' | chpasswd"
    sshpass -p ${TARGETPW} ssh-copy-id ${TARGETUSER}@${TARGETIP} 2>/dev/null
}

function prepare()
{
    dbg $FUNCNAME

    case $TARGETUSER in
	root)
	    prepare_root
	    restart_lttng_sessiond
	    ;;
	*)
	    prepare_user
	    ;;
    esac
}

#####################################################################
# main

getoptions $@

case $command in
    run)
	run
	;;
    prepare)
	prepare
	;;
    showver)
	showver
	;;
    startrelayd)
	start_relayd
	;;
esac
