#!/bin/bash

TMPDIR=/tmp
IMG0=$TMPDIR/img0
VG=prime
LV0=lv0

trace ()
{
    echo "- $*"
    $*
}

prepare_axxiaarm64 ()
{
    zcat /proc/config.gz | grep "CONFIG_BLK_DEV_DM=y" > /dev/null
    if [ $? -ne 0 ]; then
	echo "dm is not added to the default kernel, need to be added"
	exit -1
    fi
    
    echo "tmp fix for labnet issue"
    ip -4 route add via 128.224.95.179 128.224.95.52 dev eth0

    # which partx
    # if [ $? -ne 0 ]; then
    # 	echo install partx
    # 	which dnf
    # 	if [ $? -eq 0 ]; then
    # 	    # wrl18
    # 	    dnf install -y lib32-util-linux-partx > /dev/null
    # 	else
    # 	    # wrl8
    # 	    smart channel -y --add /etc/smart/channels/axxiaarm64-ml-releasehost.channel
    # 	    smart update
    # 	    smart install -y util-linux-partx > /dev/null
    # 	fi
    # fi
}

create_physical_volume ()
{
    local image=$1
    local volume_group=$2
    local size=$3

    [ ! -f $image ] && dd if=/dev/zero of=$image bs=$size count=1M
    LODEV=$(losetup -f)
    losetup $LODEV $image
    echo ",,8e,," | sfdisk $LODEV
    #partx --update $LODEV
    pvcreate -f $LODEV
    vgcreate $volume_group $LODEV
}

create_logical_volume ()
{
    local volume_name=$1
    local volume_group=$2
    local size=$3

    lvcreate -y --size $size --name $volume_name $volume_group
}

populate_fs ()
{
    local device=$1
    local mntdir=$TMPDIR/testmnt
    
    echo "fill device with data" 
    mkdir -p $mntdir
    mount $device $mntdir
    [ ! -d $mntdir/bin ] && cp -a /usr/bin $mntdir/
    sync $mntdir
    du -sh $mntdir
    umount $mntdir
}


create_fs ()
{
    local device=$1
    local mntdir=$TMPDIR/testmnt
    
    mkfs.ext4 $device
    populate_fs $device
}

show()
{
    pvdisplay
    vgdisplay
    lvdisplay
    lsblk
}

cleanup_lv ()
{
    local vg=$1
    local lv=$2
    local lodev=$3

    lvremove -y $vg/$lv
    vgremove -y $vg
    pvremove $lodev
    losetup -d $lodev
}

prepare_lv ()
{
    local vg=$1
    local lv=$2
    
    trace create_physical_volume $IMG0 $vg 100
    trace create_logical_volume $lv $vg 80M
    trace create_fs /dev/$vg/$lv
}

test_lv ()
{
    local device=$1
    local mntdir=$TMPDIR/testmnt
    mountpoint $mntdir
    [ $? -eq 0 ] && umount -v $mntdir

    mount -v $device $mntdir
    $(cd $mntdir && ls -1 | grep bin | xargs rm -rf)
    sync $mntdir
    du -sh $mntdir
    umount $mntdir
}    

test1 ()
{
    for i in $(seq 1 $1); do 
	lvremove -y $VG/$LV0
	lvcreate -y --size 80M --name $LV0 $VG
    done
}

HOSTNAME=$(hostname)
[ $HOSTNAME = axxiaarm64-prime ] && prepare_axxiaarm64
[ $HOSTNAME = axxiaarm64-ml ] && prepare_axxiaarm64

prepare_lv $VG $LV0
pvscan --cache

#test_lv /dev/$VG/$LV0

time test1 10

time lvremove -y $VG/$LV0
time lvcreate -q -y --size 80M --name $LV0 $VG

rm -f lv*.out

echo "strace"
strace -o $TMPDIR/lvremove.out -v lvremove -y $VG/$LV0
strace -o $TMPDIR/lvrcreate.out -v lvcreate -y --size 80M --name $LV0 $VG

# timestamps for wrl8 is weird
echo "strace -c"
strace -c -o $TMPDIR/lvremove_c.out lvremove -y $VG/$LV0
strace -c -o $TMPDIR/lvrcreate_c.out lvcreate -y --size 80M --name $LV0 $VG

# timestamps take longer time for wrl18?!
echo "strace -T -r -t"
time strace -T -r -t -o $TMPDIR/lvremove_Tr.out lvremove -y $VG/$LV0
time strace -T -r -t -o $TMPDIR/lvrcreate_Tr.out lvcreate -y --size 80M --name $LV0 $VG

# debug printout
lvremove -v -y $VG/$LV0
lvcreate -v -y --size 80M --name $LV0 $VG

cleanup_lv $VG $LV0 $LODEV 
